open PageComponents
open Form

let title =
  <Lang.String
    english="French housing benefits computation" french=`Calcul des aides au logement`
  />

let card: Card.Presentation.t = {
  title: <Lang.String english="French housing benefits" french="Aides au logement" />,
  action: Some((
    Internal([Nav.home, Nav.examples, Nav.frenchHousingBenefitsExample]),
    <Lang.String english="See example" french=`Voir l'exemple` />,
  )),
  icon: None,
  quote: None,
  content: <>
    <Lang.String
      english="The content of the example is generated by the Catala compiler from the "
      french=`Le contenu de cet exemple est généré par le compilateur Catala à partir des `
    />
    <Link.Text target="https://github.com/CatalaLang/catala/tree/master/examples/aides_logement">
      <Lang.String english="source code files of the example" french=`sources de l'exemple` />
    </Link.Text>
    <Lang.String
      english=". The code, like the legislative text it follows, is written in French." french="."
    />
  </>,
}

let schema = `
{
  "title": "Todo",
  "type": "object",
  "required": ["title"],
  "properties": {
    "title": {"type": "string", "title": "Title", "default": "A new task"},
    "done": {"type": "boolean", "title": "Done?", "default": false}
  }
}
`

@react.component
let make = () => {
  <>
    <Title> title </Title>
    <p>
      <Lang.String
        english="The source code for this example is available "
        french=`Le code source de cet exemple est disponible `
      />
      <Link.Text target="https://github.com/CatalaLang/catala/tree/master/examples/aides_logement">
        <Lang.String english="here" french=`ici` />
      </Link.Text>
      <Section title={<Lang.String english="Form" french=`Formulaire` />}>
        {
          let schema = schema->Js.Json.parseExn
          <>
            <Form
              schema
              onSubmit={_ => Js.log("submitted")}
              onChange={_ => Js.log("changed")}
              onError={_ => Js.log("error")}
            />
          </>
        }
      </Section>
      <Lang.String
        english=". What you can see here is the \"weaved\" output of the source files processed by the Catala compiler.
        Weaving is a concept from "
        french=`. Ce que vous pouvez voir en dessous est la version "tissée" des fichiers sources transformés par le compilateur Catala.
        Le tissage est un concept issu de la `
      />
      <Link.Text target="https://en.wikipedia.org/wiki/Literate_programming#Workflow">
        <Lang.String english="literate programming" french=`programmation littéraire` />
      </Link.Text>
      <Lang.String
        english=" corresponding to the action of interleaving together the code and its textual documentation
         as to produce a reviewable and comprehensive document. Please refer to the tutorial for a hands-on introduction
          on how to read this document."
        french=` , qui correspond à l'action d'entremêler le code et sa documentation textuelle dans un document
         complet et lisible. Veuillez vous réferer au tutoriel pour savoir comment lire ce document.`
      />
    </p>
    <Section title={<Lang.String english="Source code" french=`Code source` />}>
      <CatalaCode.DangerouslySetInnerHtml
        html=%raw(`require("../../assets/aides_logement.html")`)
      />
    </Section>
  </>
}
